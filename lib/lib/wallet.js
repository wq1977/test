Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _reactNative=require('react-native');function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var ethers=require('ethers');var ethWallet=ethers.Wallet;var Wallet=function(){function Wallet(){_classCallCheck(this,Wallet);this.accounts=[];this.wallets=[];this.loadAccounts();}_createClass(Wallet,[{key:'walletFromAccount',value:function walletFromAccount(account){var wallet=new ethWallet(account.privateKey);wallet.provider=new ethers.providers.EtherscanProvider('ropsten','6P42IJS6BDP2J9MPT43WP5DTSH39ANVQ6I');return wallet;}},{key:'loadAccounts',value:function loadAccounts(){return regeneratorRuntime.async(function loadAccounts$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.t1=JSON;_context.next=4;return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@wallets:keys'));case 4:_context.t2=_context.sent;_context.t0=_context.t1.parse.call(_context.t1,_context.t2);if(_context.t0){_context.next=8;break;}_context.t0=[];case 8:this.accounts=_context.t0;this.wallets=this.accounts.map(this.walletFromAccount);_context.next=14;break;case 12:_context.prev=12;_context.t3=_context['catch'](0);case 14:case'end':return _context.stop();}}},null,this,[[0,12]]);}},{key:'saveAccounts',value:function saveAccounts(){return regeneratorRuntime.async(function saveAccounts$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('@wallets:keys',JSON.stringify(this.accounts)));case 3:_context2.next=7;break;case 5:_context2.prev=5;_context2.t0=_context2['catch'](0);case 7:case'end':return _context2.stop();}}},null,this,[[0,5]]);}},{key:'refreshAllBalance',value:function refreshAllBalance(){var promises,_iterator,_isArray,_i,_ref2,_ref,idx,promise;return regeneratorRuntime.async(function refreshAllBalance$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:promises=this.wallets.map(function(item,idx){return{idx:idx,promise:item.getBalance()};});_iterator=promises,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==='function'?typeof Symbol==='function'?Symbol.iterator:'@@iterator':'@@iterator']();case 2:if(!_isArray){_context3.next=8;break;}if(!(_i>=_iterator.length)){_context3.next=5;break;}return _context3.abrupt('break',20);case 5:_ref2=_iterator[_i++];_context3.next=12;break;case 8:_i=_iterator.next();if(!_i.done){_context3.next=11;break;}return _context3.abrupt('break',20);case 11:_ref2=_i.value;case 12:_ref=_ref2;idx=_ref.idx;promise=_ref.promise;_context3.next=17;return regeneratorRuntime.awrap(promise);case 17:this.accounts[idx].balance=_context3.sent;case 18:_context3.next=2;break;case 20:case'end':return _context3.stop();}}},null,this);}},{key:'refreshBalance',value:function refreshBalance(idx){var balance;return regeneratorRuntime.async(function refreshBalance$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(idx>=this.accounts.length)){_context4.next=2;break;}return _context4.abrupt('return');case 2:_context4.next=4;return regeneratorRuntime.awrap(this.wallets[idx].getBalance());case 4:balance=_context4.sent;this.accounts[idx].balance=balance;return _context4.abrupt('return',this.accounts[idx].balance);case 7:case'end':return _context4.stop();}}},null,this);}},{key:'newAccount',value:function newAccount(){var wallet=ethWallet.createRandom();var account={privateKey:wallet.privateKey,saved:false,exported:false};this.accounts.push(account);this.wallets.push(this.walletFromAccount(account));}}]);return Wallet;}();var wallet=new Wallet();exports.default=wallet;